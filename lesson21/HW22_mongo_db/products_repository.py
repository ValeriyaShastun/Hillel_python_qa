from lesson21.HW22_mongo_db.base_mongo import BaseMongo


class ProductsRepo(BaseMongo):
    def __init__(self):
        self.db_name = 'store'
        self.collection_name = 'products'
        super().__init__()

    def insert_product(self, product):
        """
        method will insert one products into the collection
        :param: product - dictionary with new product data
        :return:
        """
        return self.insert_one(entity=product)

    def insert_products(self, products):
        """
        method will insert several products into the collection
        :param: products - list of dictionaries with new products' data
        :return:
        """
        return self.insert_many(entities=products)

    def find_product(self, product):
        """
        will find one product on given parameter
        :param product - dictionary with parameters to be used for search of
        the product, for example {"name": "Valery"}
        :return:
        """
        return self.find_one(entity_values=product)

    def find_all_products(self):
        """
        will find all products in the collection
        :return:
        """
        return self.find_all()

    def find_many_products(self, entities_values: dict):
        """
        will find all entities on given parameter
        :param entities_values:  - dictionary with parameters to be used for search of
        the entities, for example {"name": "Valery"}
        :return:
        """
        return self.find_many(entities_values=entities_values)

    def find_product_and_delete(self, product):
        """
        will find one product and delete it, may be inserted one field,
        NOTE that in case there are several products matching the parameter,
        the first product found will be deleted

        :return:
        """
        return self.find_one_and_delete(entity_values=product)

    def delete_products(self, products_value):
        """
        will delete products in accordance with delete query
        :param products_value: query to select products for deletion in format: {key:value}
        :return:
        """
        return self.delete_many(entities_value=products_value)

    def find_product_and_update(self, product_values_to_filter: dict, product_values_to_set: dict):
        """
        will find one product and update it
        :param product_values_to_filter: parameter to filter product in format: {key:value}
        :param product_values_to_set: parameter to be set for product in format: {key:value}
        :return:
        """
        return self.find_one_and_update(entity_values_to_filter=product_values_to_filter,
                                        entity_values_to_set=product_values_to_set)

    def update_products(self, products_values_to_filter: dict, products_values_to_set: dict):
        """
        will find all matching entities and update them
        :param products_values_to_filter: parameter to filter entities in format: {key:value}
        :param products_values_to_set: parameter to be set for entities in format: {key:value}
        :return:
        """
        return self.update_many(entities_values_to_filter=products_values_to_filter,
                                entities_values_to_set=products_values_to_set)

    def find_products_and_return_exact_fields(self, fields_to_be_displayed: list, fields_not_to_be_displayed: list):
        """
        will return entities with only fields you stipulate
        :param fields_to_be_displayed: fields which you need to receive in the result
        :param fields_not_to_be_displayed: fields which you don't need to receive in the result,
        NOTE that these fields only autogenerated fields, in other case just do not insert the filed
        you don't need to receive in the result
        :return:
        """
        return self.find_entities_and_return_exact_fields(fields_to_be_displayed=fields_to_be_displayed,
                                                          fields_not_to_be_displayed=fields_not_to_be_displayed)

    def find_products_by_query_with_operator(self, key, operator: str, filter_value):
        """
        will find products matching the query
        :param key: name of field(column) to be selected
        :param operator: available operators in str format: $eq, $gt, $gte, $in, $lt, $lte, $ne, $nin
        :param filter_value: value of the corresponding key (field)
        :return:
        """
        return self.find_by_query_with_operator(key=key, operator=operator, filter_value=filter_value)
