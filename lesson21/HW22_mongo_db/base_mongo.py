from pymongo import MongoClient
import logging


logger = logging.getLogger()
logger.setLevel('INFO')


class BaseMongo:
    def __init__(self):
        self.__my_client = MongoClient("mongodb://localhost:27017/")
        self.__mydb = self.__my_client[self.db_name]
        self.__my_collection = self.__mydb[self.collection_name]

    def list_all_databases(self):
        """
        method will return the names of all databases
        :return: list of databases
        """
        db_names = self.__my_client.list_database_names()
        logger.info(db_names)
        return db_names

    def list_all_collections_names(self):
        """
        method will return the names of all collections
        :return: list of collections
        """
        collections_names = self.__mydb.list_collection_names()
        logger.info(collections_names)
        return collections_names

    def insert_one(self, entity: dict):
        """
        method will insert one entities into the collection
        :param: entity - dictionary with new entity data
        :return: None
        """
        return self.__my_collection.insert_one(entity)

    def insert_many(self, entities: list):
        """
        method will insert several entities into the collection
        :param: entities - list of dictionaries with new entities' data
        :return: None
        """
        return self.__my_collection.insert_many(entities)

    def find_one(self, entity_values: dict):
        """
        will find one entity on given parameter
        :param entity_values - dictionary with parameters to be used for search of
        the entity, for example {"name": "Valery"}
        :return: entity received from collection
        """
        return self.__my_collection.find_one(entity_values)

    def find_all(self):
        """
        will find all entities in the collection
        :return: all entities received from collection
        """
        return self.__my_collection.find()

    def find_many(self, entities_values: dict):
        """
        will find all entities on given parameter
        :param entities_values:  - dictionary with parameters to be used for search of
        the entities, for example {"name": "Valery"}
        :return:
        """
        return self.__my_collection.find(entities_values)

    def find_one_and_delete(self, entity_values: dict):
        """
        will find one entity and delete it, may be inserted one field,
        NOTE that in case there are several entities matching the parameter,
        the first entity found will be deleted
        :param entity_values: dict with parameter in format {key:value} in
        accordance with which entity will be found and deleted
        :return:
        """
        return self.__my_collection.find_one_and_delete(entity_values)

    def delete_many(self, entities_value: dict):
        """
        will delete entities in accordance with delete query
        :param entities_value: query to select entities for deletion in format: {key:value}
        :return:
        """
        return self.__my_collection.delete_many(entities_value)

    def find_one_and_update(self, entity_values_to_filter: dict, entity_values_to_set: dict):
        """
        will find one entity and update it
        :param entity_values_to_filter: parameter to filter entity in format: {key:value}
        :param entity_values_to_set: parameter to be set for entity in format: {key:value}
        :return:
        """
        return self.__my_collection.find_one_and_update(entity_values_to_filter, {'$set': entity_values_to_set})

    def update_many(self, entities_values_to_filter: dict, entities_values_to_set: dict):
        """
        will find all matching entities and update them
        :param entities_values_to_filter: parameter to filter entities in format: {key:value}
        :param entities_values_to_set: parameter to be set for entities in format: {key:value}
        :return:
        """
        return self.__my_collection.update_many(entities_values_to_filter, {'$set': entities_values_to_set})

    def find_entities_and_return_exact_fields(self, fields_to_be_displayed: list, fields_not_to_be_displayed: list):
        """
        will return entities with only fields you stipulate
        :param fields_to_be_displayed - fields which you need to receive in the result
        :param fields_not_to_be_displayed - fields which you don't need to receive in the result,
        NOTE that these fields only autogenerated fields, in other case just do not insert the filed
        you don't need to receive in the result
        :return:
        """
        not_to_display = {field: 0 for field in fields_not_to_be_displayed}
        to_display = {field: 1 for field in fields_to_be_displayed}
        to_display.update(not_to_display)
        return self.__my_collection.find({}, to_display)

    def find_by_query_with_operator(self, key, operator: str, filter_value):
        """
        will find entities matching the query
        :param key: name of field(column) to be selected
        :param operator: available operators in str format: $eq, $gt, $gte, $in, $lt, $lte, $ne, $nin
        :param filter_value: value of the corresponding key (field)
        :return:
        """
        return self.__my_collection.find({key: {operator: filter_value}})

    def sort_ascending(self, field_to_sort_by: str):
        """
        sorting entities in ascending order
        :param field_to_sort_by: field(column) by which the sorting will be performed
        :return:
        """
        return self.__my_collection.find().sort(field_to_sort_by, 1)

    def sort_descending(self, field_to_sort_by):
        """
        sorting entities in ascending order
        :param field_to_sort_by: field(column) by which the sorting will be performed
        :return:
        """
        return self.__my_collection.find().sort(field_to_sort_by, -1)

    def limit(self, number_of_entities):
        """
        will reflect specified number of entities starting from the beginning of the collection
        :param number_of_entities: number of entities to be selected
        :return:
        """
        return self.__my_collection.find().limit(number_of_entities)

    def limit_and_sort(self, field_to_sort_by, number_of_entities, asc=True):
        """
        will reflect specified number of entities starting from the beginning of the collection
        :param field_to_sort_by: field(column) by which the sorting will be performed
        :param number_of_entities: number of entities to be selected
        :param asc: order of sorting, asc=True -> ascending order, asc-False - descending order
        :return:
        """
        if asc:
            return self.__my_collection.find().limit(number_of_entities).sort(field_to_sort_by, 1)
        else:
            return self.__my_collection.find().limit(number_of_entities).sort(field_to_sort_by, -1)

    def drop_collection(self):
        """
        deleting collection
        :return:
        """
        return self.__my_collection.drop()

    def delete_all_docs_in_collection(self):
        """
        deleting all documents in the collection
        :return:
        """
        return self.__my_collection.delete_many({})

    def __del__(self):  # Dispose pattern
        if self.__my_client:
            self.__my_client.close()
