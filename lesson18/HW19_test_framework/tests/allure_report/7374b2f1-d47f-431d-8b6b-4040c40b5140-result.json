{"name": "test_delete_book_for_user", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "@pytest.fixture()\n    def login_api():\n        login_page_post_response = LoginAPI().post_login_user()\n>       user_id = json.loads(login_page_post_response.text)[\"userId\"]\n\n../conftest.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/__init__.py:348: in loads\n    return _default_decoder.decode(s)\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f9415d7a8d0>, s = '', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/decoder.py:355: JSONDecodeError"}, "description": "\n     Description: test checks POST method for book store page in order to delete book\n     from user's collection\n\n     Pre-conditions:\n     1. Send POST request for login page with user login and password\n     2. Extract user id and token from server response\n     3. Add book into user's collection\n\n     Steps:\n     1. Send POST request to delete a single book from user's collection\n     2. Check status code and response reason\n\n     Post-conditions:\n     1. Delete book for user\n     2. Logout from website\n\n     Expected:\n     1. After sending POST request to delete a book from user's list\n     we receive HTTPStatus.NO_CONTENT and response reason as 'No Content'\n     ", "attachments": [{"name": "log", "source": "9995a692-ddda-4e31-8570-a960997590b4-attachment.txt", "type": "text/plain"}], "start": 1656793836735, "stop": 1656793836735, "uuid": "81c7b06a-17c7-4852-8837-655708dbe626", "historyId": "c1e71cfca79649649a556d376306ad20", "testCaseId": "e2b6865589dbbfb1f80f4b2ec7ce8673", "fullName": "_api_tests.test_book_store_api#test_delete_book_for_user", "labels": [{"name": "feature", "value": "Valeriia Shastun"}, {"name": "tag", "value": "positive"}, {"name": "parentSuite", "value": "_api_tests"}, {"name": "suite", "value": "test_book_store_api"}, {"name": "host", "value": "Valeriias-MacBook-Pro.local"}, {"name": "thread", "value": "87992-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "_api_tests.test_book_store_api"}]}